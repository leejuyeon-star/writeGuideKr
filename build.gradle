plugins {
	id 'java'
	id 'org.springframework.boot' version '3.3.5'
	id 'io.spring.dependency-management' version '1.1.6'
}

group = 'writeguidekrGroup'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(17)
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
//	implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'		//restApi를 사용하기 때문에 view기능 하는 것 비활성화
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	// 동기 방식 사용할때
	implementation 'org.springframework.boot:spring-boot-starter-web'
	// 비동기 논블럭킹 방식 사용할때
	//Mono<>, Flex<> 사용가능하게 됨
	implementation 'org.springframework.boot:spring-boot-starter-webflux'
	// Configuration Properties 처리를 위한 의존성 추가
	annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
	// Jackson
	implementation 'com.fasterxml.jackson.core:jackson-databind:2.15.2'
	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.security:spring-security-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
	//Oauth2 사용 위함
	implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'
	//h2
	runtimeOnly 'com.h2database:h2'
}

tasks.named('test') {
	useJUnitPlatform()
}






//참고 : https://mopil.tistory.com/59
// 스프링 부트를 jar로 빌드 할 때, 리액트도 같이 빌드해서 static 폴더에 넣겠다는 뜻

def frontendDir = "$projectDir/src/main/frontend"

sourceSets {
	main {
		resources { srcDirs = ["$projectDir/src/main/resources"]
		}
	}
}

tasks.named("processResources") {
	dependsOn("copyReactBuildFiles")
}
//
//task installReact(type: Exec) {
//	workingDir "$frontendDir"
//	inputs.dir "$frontendDir"
//	group = BasePlugin.BUILD_GROUP
//	if (System.getProperty('os.name').toLowerCase(Locale.ROOT).contains('windows')) {
//		commandLine "npm.cmd", "audit", "fix"
//		commandLine 'npm.cmd', 'install' }
//	else {
//		commandLine "npm", "audit", "fix" commandLine 'npm', 'install'
//	}
//}
//
//task buildReact(type: Exec) {
//	dependsOn "installReact"
//	workingDir "$frontendDir"
//	inputs.dir "$frontendDir"
//	group = BasePlugin.BUILD_GROUP
//	if (System.getProperty('os.name').toLowerCase(Locale.ROOT).contains('windows')) {
//		commandLine "npm.cmd", "run-script", "build"
//	} else {
//		commandLine "npm", "run-script", "build"
//	}
//}
//
//task copyReactBuildFiles(type: Copy) {
//	dependsOn "buildReact"
//	from "$frontendDir/build"
//	into "$projectDir/src/main/resources/static"
//}


// React 패키지 설치 작업
task installReact(type: Exec) {
	workingDir "$frontendDir"
	inputs.dir "$frontendDir"

	group = "build"
	description = "Install npm dependencies for React frontend."

	// 운영체제에 맞는 명령어 실행
	if (System.getProperty('os.name').toLowerCase(Locale.ROOT).contains('windows')) {
		commandLine "npm.cmd", "audit", "fix"
		commandLine "npm.cmd", "install"
	} else {
		commandLine "npm", "audit", "fix"
		commandLine "npm", "install"
	}
}

// React 빌드 작업
task buildReact(type: Exec) {
	dependsOn installReact
	workingDir "$frontendDir"
	inputs.dir "$frontendDir"

	group = "build"
	description = "Build the React frontend."

	// 운영체제에 맞는 명령어 실행
	if (System.getProperty('os.name').toLowerCase(Locale.ROOT).contains('windows')) {
		commandLine "npm.cmd", "run", "build"
	} else {
		commandLine "npm", "run", "build"
	}
}

// React 빌드 결과물을 Spring Boot의 static 디렉토리로 복사
task copyReactBuildFiles(type: Copy) {
	dependsOn buildReact
	from "$frontendDir/build"
	into "$projectDir/src/main/resources/static"

	group = "build"
	description = "Copy React build files into Spring Boot static resources."
}

